#!/bin/bash

export FABRIC_CFG_PATH="${PWD}/config"
export FABRIC_CA_CLIENT_HOME="${PWD}"

set -x

sudo docker-compose -f docker-compose-ca.yaml up -d

echo "Waiting for ca to be ready..."
sleep 5

fabric-ca-client enroll -u https://caadmin:caadminpw@localhost:7054 --caname ca-${ORG} --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem"

echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-7054-ca-${ORG}.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-7054-ca-${ORG}.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-7054-ca-${ORG}.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-7054-ca-${ORG}.pem
    OrganizationalUnitIdentifier: orderer" > "${PWD}/msp/config.yaml"

mkdir -p "${PWD}/msp/tlscacerts"
cp "${PWD}/fabric-ca/ca-cert.pem" "${PWD}/msp/tlscacerts/ca.crt"

mkdir -p "${PWD}/tlsca"
cp "${PWD}/fabric-ca/ca-cert.pem" "${PWD}/tlsca/tlsca-cert.pem"

mkdir -p "${PWD}/ca"
cp "${PWD}/fabric-ca/ca-cert.pem" "${PWD}/ca/ca-cert.pem"

fabric-ca-client register --caname ca-${ORG} --id.name orderer0 --id.secret orderer0pw --id.type orderer --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem" 1>/dev/null

fabric-ca-client enroll -u https://orderer0:orderer0pw@localhost:7054 --caname ca-${ORG} -M "${PWD}/orderers/orderer0/msp" --csr.hosts orderer0.${HOST} --csr.hosts localhost --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem"

cp "${PWD}/msp/config.yaml" "${PWD}/orderers/orderer0/msp/config.yaml"

fabric-ca-client enroll -u https://orderer0:orderer0pw@localhost:7054 --caname ca-${ORG} -M "${PWD}/orderers/orderer0/tls" --enrollment.profile tls --csr.hosts orderer0.${HOST} --csr.hosts localhost --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem"

cp "${PWD}/orderers/orderer0/tls/tlscacerts/"* "${PWD}/orderers/orderer0/tls/ca.crt"
cp "${PWD}/orderers/orderer0/tls/signcerts/"* "${PWD}/orderers/orderer0/tls/server.crt"
cp "${PWD}/orderers/orderer0/tls/keystore/"* "${PWD}/orderers/orderer0/tls/server.key"

mkdir -p "${PWD}/orderers/orderer0/msp/tlscacerts"
cp "${PWD}/orderers/orderer0/tls/tlscacerts/"* "${PWD}/orderers/orderer0/msp/tlscacerts/tlsca-cert.pem"

fabric-ca-client register --caname ca-${ORG} --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem" 1>/dev/null

fabric-ca-client enroll -u https://peer0:peer0pw@localhost:7054 --caname ca-${ORG} -M "${PWD}/peers/peer0/msp" --csr.hosts peer0.${HOST} --csr.hosts localhost --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem"

cp "${PWD}/msp/config.yaml" "${PWD}/peers/peer0/msp/config.yaml"

fabric-ca-client enroll -u https://peer0:peer0pw@localhost:7054 --caname ca-${ORG} -M "${PWD}/peers/peer0/tls" --enrollment.profile tls --csr.hosts peer0.${HOST} --csr.hosts localhost --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem"

cp "${PWD}/peers/peer0/tls/tlscacerts/"* "${PWD}/peers/peer0/tls/ca.crt"
cp "${PWD}/peers/peer0/tls/signcerts/"* "${PWD}/peers/peer0/tls/server.crt"
cp "${PWD}/peers/peer0/tls/keystore/"* "${PWD}/peers/peer0/tls/server.key"

fabric-ca-client register --caname ca-${ORG} --id.name admin --id.secret adminpw --id.type admin --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem" 1>/dev/null
fabric-ca-client enroll -u https://admin:adminpw@localhost:7054 --caname ca-${ORG} -M "${PWD}/users/admin/msp" --tls.certfiles "${PWD}/fabric-ca/ca-cert.pem"
cp "${PWD}/msp/config.yaml" "${PWD}/users/admin/msp/config.yaml"

# function one_line_pem {
#     echo "`awk 'NF {sub(/\\n/, ""); printf "%s\\\\\\\n",$0;}' $1`"
# }

# function json_ccp {
#     local PP=$(one_line_pem $4)
#     local CP=$(one_line_pem $5)
#     sed -e "s/\${ORG}/$1/" \
#         -e "s/\${P0PORT}/$2/" \
#         -e "s/\${CAPORT}/$3/" \
#         -e "s#\${PEERPEM}#$PP#" \
#         -e "s#\${CAPEM}#$CP#" \
#         template/ccp-template.json
# }

# function yaml_ccp {
#     local PP=$(one_line_pem $4)
#     local CP=$(one_line_pem $5)
#     sed -e "s/\${ORG}/$1/" \
#         -e "s/\${P0PORT}/$2/" \
#         -e "s/\${CAPORT}/$3/" \
#         -e "s#\${PEERPEM}#$PP#" \
#         -e "s#\${CAPEM}#$CP#" \
#         template/ccp-template.yaml | sed -e $'s/\\\\n/\\\n          /g'
# }

# PEERPEM="tlsca/tlsca-cert.pem"
# CAPEM="ca/ca-cert.pem"

# echo "$(json_ccp $ORG 7051 7054 $PEERPEM $CAPEM)" > "connection.json"
# echo "$(yaml_ccp $ORG 7051 7054 $PEERPEM $CAPEM)" > "connection.yaml"

printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -

sudo docker-compose -f docker-compose.yaml up -d

set +x

echo "Setup complete."